The deadline for submitting the report of your final project will be Dec 14 at noon (12 PM). Your report should be in 3-4 pages and should include:

    Summary of proposal and goals
    description of what you created (both what works and what does not work)
    usage instructions (how does a user build, run, and use the project)
    challenges and surprises encountered
    observations about Rust: what aspects of Rust helped or hindered your work on this project?

Again, each group needs to submit only once.


Proposal/Goals Summary:


What Works and What Doesn't:

Currently, we have a fully functioning Genius scraper and parser called song_structures. It takes in some artist's name and produces that artist's top ten songs listed on Genius, then stores those songs in individual text files in a dedicated lyrics folder.

Additionally, we have a functioning analysis program called rs_natural_sandbox that takes in a databse of key/label pairs, trains a model on the database, then guesses what label best matches a given key. There is partial functionality for directly taking in the lyrics folder of song_structures and transforming that output into a readable database file, but I was unable to finish this part of the data transformation.



Usage Instructions:

For song_structures, call the program from the command line with "cargo run [artist_name]". If you want to include spaces in the artist name, either surround the entire name with quotation marks, or escape space chars with '\'. This will store 10 lyric files in a folder with the artist's name.

For rs_natural_playground, you can choose either "raw" or "prefab" mode. Raw mode is supposed to read in from the lyrics folder of song_structures' output, but this functionality is not complete. Prefab mode takes in an already defined dataset of "[key]/[label]" pairs separated by commas. The delimitter character can be changed to something other than a comma by changing the function parameter of generate_dataset on lines 28 and 42.


Challenges and Surprises:
When I was implementing the song_structures section, I did not realize that part of the Rust library we were using to interact with the Genius API no longer worked. This caused some major confusion for a while, as I did not consider that the library was the source of the problem In the end, I was able to fix the problem by writing my own function to take the url returned from the library functions that did work, and use a separate Rust module to download the page manually.


Observations about Rust:

Overall, I found the extensive community documentation and crate capabilities to be very impressive. Implementing our project proposal relied heavily on finding the right libraries for the job, which was relatively easy. However, it still irritates me on a personal level that Rust does not let me cobble together spaghetti solutions as a placeholder. It really wants me to be memory safe, which I know is the whole point of the language, but it makes me want to go back to Java, where I can break one thing to fix anotherw.
